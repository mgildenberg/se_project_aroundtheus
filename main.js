!function(){"use strict";const e={formSelector:".popup__form",inputSelector:".popup__input",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible"},t=document.querySelector(".profile__edit-button_avatar"),s=document.querySelector("#profile-edit-button"),i=document.querySelector(".profile__add-button"),o=document.querySelector("#profile-title-input"),n=document.querySelector("#profile-description-input"),r=document.forms["add-image-form"],a=document.forms["edit-profile-form"],l=document.forms["edit-avatar-form"];class c{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){console.log("popup class open"),this._popupElement.classList.add("popup_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"==e.key&&this.close()};_handleClickAway=e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close"))&&this.close()};setEventListeners(){this._popupElement.addEventListener("mousedown",this._handleClickAway)}}class h extends c{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".popup__form"),this._handleFormSubmit=t,this._formInputs=this._popupForm.querySelectorAll(".popup__input"),this._submitButton=this._popupForm.querySelectorAll(".popup__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e={};return this._formInputs.forEach((t=>{e[t.name]=t.value})),e}_submitForm(){const e=this._getInputValues();this._handleFormSubmit(e),this.close()}setLoadingState(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Save";console.log("we are in",this._popupElement.id),e?(this._submitButtonText="...Saving",console.log("loading state is ",e,"submitButtonText is",this._submitButtonText)):(this._submitButtonText=t,console.log("loading state is ",e,"submitButtonText is",this._submitButtonText))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(()=>{this._submitForm()}))}close(){this._popupForm.reset(),super.close()}}var u=class{constructor(e,t){this._settings=e,this._form=t,this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector)}_hasInvalidInput(){return!this._inputEls.every((e=>e.validity.valid))}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_toggleButtonState(){if(this._hasInvalidInput())return this.disableButton();this._enableButton()}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t.classList.add(this._errorClass),t.textContent=e.validationMessage}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e);this._hideInputError(e)}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this.disableButton(),this._setEventListeners()}};class d{constructor(e,t,s,i,o){let{name:n,link:r,_id:a,isLiked:l}=e;this._name=n,this._link=r,this._cardSelector=t,this._handleCardClick=s,this._handleTrashClick=i,this._handleLikeClick=o,this._cardId=a,this._isLiked=l,this._cardElement=document.querySelector(this._cardSelector).cloneNode(!0).content.firstElementChild,this._likeButton=this._cardElement.querySelector(".card__like-button")}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{console.log("like button clicked"),this._handleLikeButton(),this.toggleLikeStyle()})),this._cardImageEl.addEventListener("click",(()=>{this._handleCardClick({name:this._name,link:this._link})})),this._cardTrashButton=this._cardElement.querySelector(".card__trash-button"),this._cardTrashButton.addEventListener("click",(e=>{console.log("card Trash Button clicked"),this._handleTrashClick(e),console.log("card ID is ",this._cardId)}))}getLikes(){return this._isLiked}_setLikeStyle(){this._isLiked&&this._likeButton.classList.add("card__like-button_active")}toggleLikeStyle(){this._likeButton.classList.toggle("card__like-button_active")}_handleLikeButton(){this._handleLikeClick(this._cardId)}remove(){this._cardElement.remove(),this._cardElement=null}_replaceImageData(){this._cardImageEl.src=this._link,this._cardImageEl.alt=`Photo of ${this._name}`,this._cardTitleEl.textContent=this._name}getView(){return this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._replaceImageData(),this._setLikeStyle(),this._setEventListeners(),this._cardElement}}const _=new class{constructor(e){let{nameSelector:t,jobSelector:s,avatarSelector:i}=e;this._profileTitle=document.querySelector(t),this._profileDescription=document.querySelector(s),this._avatarElement=document.querySelector(i)}getUserInfo(){return this._name=this._profileTitle.textContent,this._job=this._profileDescription.textContent,{name:this._name,job:this._job}}setUserInfo(e){this._profileTitle.textContent=e.name,this._profileDescription.textContent=e.about}setUserAvatar(e){this._avatarElement.src=e.avatar,this._avatarElement.alt=this._profileTitle.textContent}}({nameSelector:".profile__title",jobSelector:".profile__description",avatarSelector:"#profile-avatar"}),p=new class{constructor(e){let{baseURL:t,headers:s}=e;this._baseURL=t,this._headers=s}_checkServerResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseURL}/users/me`,{headers:this._headers}).then((e=>this._checkServerResponse(e)))}getInitialCards(){return fetch(`${this._baseURL}/cards`,{headers:this._headers}).then((e=>this._checkServerResponse(e)))}addNewCard(e){return fetch(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.name,link:e.link})}).then((e=>this._checkServerResponse(e)))}deleteCard(e){return console.log("deleteCard",e),fetch(`${this._baseURL}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>this._checkServerResponse(e)))}updateUserInfo(e){console.log("updateUserInfo",e);const t=e.title,s=e.about;return fetch(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then((e=>this._checkServerResponse(e)))}updateAvatar(e){console.log(e);let t=e.link;return console.log(t),fetch(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:t})}).then((e=>this._checkServerResponse(e)))}addLike(e){return fetch(`${this._baseURL}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>this._checkServerResponse(e)))}deleteLike(e){return fetch(`${this._baseURL}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>this._checkServerResponse(e)))}}({baseURL:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"98cf51ba-481b-4eec-9343-23efbe8fbf82","Content-Type":"application/json"}});let m,v=p.getUserInfo(),b=p.getInitialCards();function g(e){const t=new d(e,"#card-template",(e=>{C.open(e)}),(s=>{B.open(),B.setSubmitAction((()=>{B.setLoadingState(!0,"Yes"),p.deleteCard(e._id).then((()=>{B.setLoadingState(!1,"Yes"),t.remove()}))}))}),(e=>{console.log("card isLiked value starts as",t.getLikes()),t.getLikes()?p.deleteLike(e).then((e=>{console.log("card isLiked value is now",e.isLiked)})):p.addLike(e).then((e=>{console.log("card isLiked value is now",e.isLiked)}))}));return t.getView()}Promise.all([v,b]).then((e=>{let[t,s]=e;v=t._id,_.setUserInfo(t),_.setUserAvatar(t),console.log(s),m=new class{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._cardElementsContainer=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}prependItem(e){this._cardElementsContainer.prepend(e)}}({items:s,renderer:e=>{const t=g(e);m.prependItem(t)}},".cards__list"),m.renderItems()}));const L=new h("#profile-edit-popup",(e=>{L.setLoadingState(!0),p.updateUserInfo(e).then((()=>{p.getUserInfo().then((e=>_.setUserInfo(e))).finally((()=>{L.setLoadingState(!1),L.close()}))}))}));L.setEventListeners();const S=new u(e,a);S.enableValidation();const E=new u(e,r);E.enableValidation(),new u(e,l).enableValidation();const k=new h("#add-image-popup",(e=>{p.addNewCard(e).then((e=>{const t=g(e.data);m.prependItem(t)}))})),f=new h("#edit-avatar-popup",(e=>{f.setLoadingState(!0),p.updateAvatar(e).then((()=>{f.setLoadingState(!1),p.getUserInfo().then((e=>{_.setUserAvatar(e)}))}))}));t.addEventListener("click",(()=>{console.log("edit avatar clicked"),f.open()})),f.setEventListeners();const C=new class extends c{constructor(e){super({popupSelector:e}),this._imageViewerImage=this._popupElement.querySelector(".image-viewer__image"),this._imageViewerTitle=this._popupElement.querySelector(".image-viewer__title")}open(e){super.open(),this._imageViewerImage.src=e.link,this._imageViewerImage.alt=`Photo of ${e.link}`,this._imageViewerTitle.textContent=e.name}}("#popup-image-viewer");C.setEventListeners();const B=new class extends c{constructor(e){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".popup__form"),this._submitButton=this._popupForm.querySelector(".popup__button"),this._submitButtonText=this._submitButton.textContent}setSubmitAction(e){this._callbackFunc=e}setLoadingState(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Save";console.log("we are in",this._popupElement.id),e?(this._submitButtonText="...Saving",console.log("loading state is ",e,"submitButtonText is",this._submitButtonText)):(this._submitButtonText=t,console.log("loading state is ",e,"submitButtonText is",this._submitButtonText))}_submitForm(){this._callbackFunc(),this.close()}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),console.log("clicked Yes"),this._submitForm()}))}close(){super.close()}}("#delete-card-popup");B.setEventListeners(),s.addEventListener("click",(e=>{S.disableButton(),L.open(),function(e){let t=_.getUserInfo();o.value=t.name,n.value=t.job}()})),i.addEventListener("click",(()=>{E.disableButton(),k.open()})),k.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,